// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************
// fast mode: true
// **************************************************************************
// ignore_for_file: duplicate_import,implementation_imports,library_private_types_in_public_api,multiple_combinators,prefer_const_literals_to_create_immutables,unintended_html_in_doc_comment,unnecessary_import,unused_import,unused_local_variable,unused_shown_name,unnecessary_library_name,unnecessary_library_directive
import 'package:example_route_extension/src/interceptors/login_interceptor.dart';
import 'package:example_route_extension/src/interceptors/permission_interceptor.dart';
import 'package:ff_annotation_route_library/ff_annotation_route_library.dart';
import 'package:flutter/widgets.dart';

import 'src/pages/home_page.dart';
import 'src/pages/login_page.dart';
import 'src/pages/page_a.dart';
import 'src/pages/page_b.dart';

/// The routeInterceptors auto generated by https://github.com/fluttercandies/ff_annotation_route
const Map<String, List<RouteInterceptor>> routeInterceptors =
    <String, List<RouteInterceptor>>{
  'fluttercandies://PageA': <RouteInterceptor>[LoginInterceptor()],
  'fluttercandies://PageB': <RouteInterceptor>[
    LoginInterceptor(),
    PermissionInterceptor()
  ],
};

/// Get route settings base on route name, auto generated by https://github.com/fluttercandies/ff_annotation_route
FFRouteSettings getRouteSettings({
  required String name,
  Map<String, dynamic>? arguments,
  PageBuilder? notFoundPageBuilder,
}) {
  Map<String, dynamic> safeArguments = arguments ?? const <String, dynamic>{};
  if (arguments != null && arguments.isNotEmpty) {
    final Map<String, dynamic> ignoreCaseMap = <String, dynamic>{};
    safeArguments.forEach((String key, dynamic value) {
      ignoreCaseMap[key.toLowerCase()] = value;
    });
    safeArguments = ignoreCaseMap;
  }
  switch (name) {
    case 'fluttercandies://HomePage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => HomePage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
        routeName: 'HomePage',
        description: 'HomePage',
      );
    case 'fluttercandies://LoginPage':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => LoginPage(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
        routeName: 'LoginPage',
        description: 'LoginPage',
      );
    case 'fluttercandies://PageA':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => PageA(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
        routeName: 'PageA',
        description: 'PageA',
      );
    case 'fluttercandies://PageB':
      return FFRouteSettings(
        name: name,
        arguments: arguments,
        builder: () => PageB(
          key: asT<Key?>(
            safeArguments['key'],
          ),
        ),
        routeName: 'PageB',
        description: 'PageB',
      );
    default:
      return FFRouteSettings(
        name: FFRoute.notFoundName,
        routeName: FFRoute.notFoundRouteName,
        builder: notFoundPageBuilder ?? () => Container(),
      );
  }
}
