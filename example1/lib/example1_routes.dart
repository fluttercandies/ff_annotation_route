// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************

import 'package:example1/src/model/test_model.dart' hide TestMode2;
import 'package:example1/src/model/test_model1.dart' hide TestMode3;

import 'src/pages/main_page.dart';

const List<String> routeNames = <String>[
  '/demogrouppage',
  '/root',
  '/testPageA',
  '/testPageB',
  '/testPageC',
  '/testPageD',
  '/testPageE',
  '/testPageF',
  '/testPageG',
  'ChildRouterPage',
  'NestedMainPage',
  'NestedTestPage',
];

class Routes {
  const Routes._();

  /// 'DemoGroupPage'
  ///
  /// [name] : '/demogrouppage'
  ///
  /// [routeName] : 'DemoGroupPage'
  ///
  /// [constructors] :
  ///
  /// DemoGroupPage : [MapEntry<String, List<DemoRouteResult>>(required) keyValue]
  static const _Demogrouppage demogrouppage = _Demogrouppage();

  /// 'MainPage'
  ///
  /// [name] : '/root'
  ///
  /// [routeName] : 'MainPage'
  ///
  /// [constructors] :
  ///
  /// MainPage : []
  static const String root = '/root';

  /// 'This is test page A.'
  ///
  /// [name] : '/testPageA'
  ///
  /// [routeName] : 'testPageA'
  ///
  /// [description] : 'This is test page A.'
  ///
  /// [exts] : {group: Simple, order: 0}
  static const String testPageA = '/testPageA';

  /// "This is test ' page B."
  ///
  /// [name] : '/testPageB'
  ///
  /// [routeName] : 'testPageB '
  ///
  /// [description] : "This is test ' page B."
  ///
  /// [constructors] :
  ///
  /// TestPageB : [String? argument]
  ///
  /// [showStatusBar] : true
  ///
  /// [pageRouteType] : PageRouteType.material
  ///
  /// [exts] : {group: Simple, order: 1}
  static const _TestPageB testPageB = _TestPageB();

  /// 'Push/Pop test page.'
  ///
  /// [name] : '/testPageC'
  ///
  /// [routeName] : 'testPageC'
  ///
  /// [description] : 'Push/Pop test page.'
  ///
  /// [exts] : {group: Simple, order: 2}
  static const String testPageC = '/testPageC';

  /// "This is test ' page D."
  ///
  /// [name] : '/testPageD'
  ///
  /// [routeName] : 'testPageD '
  ///
  /// [description] : "This is test ' page D."
  ///
  /// [constructors] :
  ///
  /// TestPageD : [String?(required) argument, bool? optional, String? id]
  ///
  /// TestPageD.another0 : [String?(required) argument]
  ///
  /// TestPageD.another1 : [String?(required) argument, bool? optional]
  ///
  /// TestPageD.another2 : [String?(required) argument]
  ///
  /// TestPageD.another3 : [String?(required) argument, bool? optional]
  ///
  /// [showStatusBar] : true
  ///
  /// [pageRouteType] : PageRouteType.material
  ///
  /// [exts] : {group: Complex, order: 0}
  static const _TestPageD testPageD = _TestPageD();

  /// 'Show how to push new page with arguments(class)'
  ///
  /// [name] : '/testPageE'
  ///
  /// [routeName] : 'testPageE'
  ///
  /// [description] : 'Show how to push new page with arguments(class)'
  ///
  /// [constructors] :
  ///
  /// TestPageE : [TestMode? testMode, TestMode1? testMode1]
  ///
  /// TestPageE.test : []
  ///
  /// TestPageE.requiredC : [TestMode?(required) testMode]
  ///
  /// [exts] : {group: Complex, order: 1}
  static const _TestPageE testPageE = _TestPageE();

  /// 'This is test page F.'
  ///
  /// [name] : '/testPageF'
  ///
  /// [routeName] : 'testPageF'
  ///
  /// [description] : 'This is test page F.'
  ///
  /// [constructors] :
  ///
  /// TestPageF : [List<int>?(required) list, Map<String, String>? map, TestMode? testMode]
  ///
  /// [showStatusBar] : true
  ///
  /// [pageRouteType] : PageRouteType.material
  ///
  /// [exts] : {group: Complex, order: 2}
  static const _TestPageF testPageF = _TestPageF();

  /// 'Pop with result test page(push from TestPageC)'
  ///
  /// [name] : '/testPageG'
  ///
  /// [routeName] : 'testPageG'
  ///
  /// [description] : 'Pop with result test page(push from TestPageC)'
  ///
  /// [exts] : {group: Simple, order: 3}
  static const String testPageG = '/testPageG';

  /// 'ChildRouterPage'
  ///
  /// [name] : 'ChildRouterPage'
  ///
  /// [routeName] : 'ChildRouterPage'
  ///
  /// [description] : 'ChildRouterPage'
  static const String childRouterPage = 'ChildRouterPage';

  /// 'NestedMainPage'
  ///
  /// [name] : 'NestedMainPage'
  ///
  /// [routeName] : 'NestedMainPage'
  ///
  /// [description] : 'NestedMainPage'
  static const String nestedMainPage = 'NestedMainPage';

  /// 'NestedTestPage'
  ///
  /// [name] : 'NestedTestPage'
  ///
  /// [routeName] : 'NestedTestPage'
  ///
  /// [description] : 'NestedTestPage'
  static const String nestedTestPage = 'NestedTestPage';
}

class _Demogrouppage {
  const _Demogrouppage();

  String get name => '/demogrouppage';

  Map<String, dynamic> d(
          {required MapEntry<String, List<DemoRouteResult>> keyValue}) =>
      <String, dynamic>{
        'keyValue': keyValue,
      };

  @override
  String toString() => name;
}

class _TestPageB {
  const _TestPageB();

  String get name => '/testPageB';

  Map<String, dynamic> d({String? argument}) => <String, dynamic>{
        'argument': argument,
      };

  @override
  String toString() => name;
}

class _TestPageD {
  const _TestPageD();

  String get name => '/testPageD';

  Map<String, dynamic> d(String? argument,
          {bool? optional = false, String? id = 'flutterCandies'}) =>
      <String, dynamic>{
        'argument': argument,
        'optional': optional,
        'id': id,
      };

  Map<String, dynamic> another0({required String? argument}) =>
      <String, dynamic>{
        'argument': argument,
        'constructorName': 'another0',
      };

  Map<String, dynamic> another1(String? argument, [bool? optional = false]) =>
      <String, dynamic>{
        'argument': argument,
        'optional': optional,
        'constructorName': 'another1',
      };

  Map<String, dynamic> another2(String? argument) => <String, dynamic>{
        'argument': argument,
        'constructorName': 'another2',
      };

  Map<String, dynamic> another3(String? argument, {bool? optional}) =>
      <String, dynamic>{
        'argument': argument,
        'optional': optional,
        'constructorName': 'another3',
      };

  @override
  String toString() => name;
}

class _TestPageE {
  const _TestPageE();

  String get name => '/testPageE';

  Map<String, dynamic> d(
          {TestMode? testMode = const TestMode(id: 2, isTest: false),
          TestMode1? testMode1}) =>
      <String, dynamic>{
        'testMode': testMode,
        'testMode1': testMode1,
      };

  Map<String, dynamic> test() => const <String, dynamic>{
        'constructorName': 'test',
      };

  Map<String, dynamic> requiredC({required TestMode? testMode}) =>
      <String, dynamic>{
        'testMode': testMode,
        'constructorName': 'requiredC',
      };

  @override
  String toString() => name;
}

class _TestPageF {
  const _TestPageF();

  String get name => '/testPageF';

  Map<String, dynamic> d(List<int>? list,
          {Map<String, String>? map, TestMode? testMode}) =>
      <String, dynamic>{
        'list': list,
        'map': map,
        'testMode': testMode,
      };

  @override
  String toString() => name;
}
