// GENERATED CODE - DO NOT MODIFY MANUALLY
// **************************************************************************
// Auto generated by https://github.com/fluttercandies/ff_annotation_route
// **************************************************************************
// fast mode: true
// version: 10.1.0
// **************************************************************************
// ignore_for_file: duplicate_import,implementation_imports,library_private_types_in_public_api,multiple_combinators,prefer_const_literals_to_create_immutables,unintended_html_in_doc_comment,unnecessary_import,unused_import,unused_local_variable,unused_shown_name, unnecessary_library_name
import 'package:example1/src/model/test_model.dart' hide TestMode2;
import 'package:example1/src/model/test_model1.dart' hide TestMode3;
import 'package:flutter/foundation.dart';

import 'src/pages/main_page.dart';

/// The routeNames auto generated by https://github.com/fluttercandies/ff_annotation_route
const List<String> routeNames = <String>[
  '/',
  '/demogrouppage',
  '/testPageA',
  '/testPageB',
  '/testPageC',
  '/testPageD',
  '/testPageE',
  '/testPageF',
  '/testPageG',
  'ChildRouterPage',
  'NestedMainPage',
  'NestedTestPage',
];

/// The routes auto generated by https://github.com/fluttercandies/ff_annotation_route
class Routes {
  const Routes._();

  /// 'MainPage'
  ///
  /// [name] : '/'
  ///
  /// [routeName] : 'MainPage'
  static const _Root root = _Root();

  /// 'DemoGroupPage'
  ///
  /// [name] : '/demogrouppage'
  ///
  /// [routeName] : 'DemoGroupPage'
  ///
  /// [constructors] :
  ///
  /// DemoGroupPage : [MapEntry<String, List<DemoRouteResult>>(required) keyValue]
  static const _Demogrouppage demogrouppage = _Demogrouppage();

  /// 'This is test page A.'
  ///
  /// [name] : '/testPageA'
  ///
  /// [routeName] : 'testPageA'
  ///
  /// [description] : 'This is test page A.'
  ///
  /// [exts] : {'group': 'Simple', 'order': 0}
  static const _TestPageA testPageA = _TestPageA();

  /// "This is test ' page B."
  ///
  /// [name] : '/testPageB'
  ///
  /// [routeName] : 'testPageB '
  ///
  /// [description] : "This is test ' page B."
  ///
  /// [constructors] :
  ///
  /// TestPageB : [String? argument]
  ///
  /// [pageRouteType] : PageRouteType.material
  ///
  /// [exts] : {'group': 'Simple', 'order': 1}
  static const _TestPageB testPageB = _TestPageB();

  /// 'Push/Pop test page.'
  ///
  /// [name] : '/testPageC'
  ///
  /// [routeName] : 'testPageC'
  ///
  /// [description] : 'Push/Pop test page.'
  ///
  /// [exts] : {'group': 'Simple', 'order': 2}
  static const _TestPageC testPageC = _TestPageC();

  /// "This is test ' page D."
  ///
  /// [name] : '/testPageD'
  ///
  /// [routeName] : 'testPageD '
  ///
  /// [description] : "This is test ' page D."
  ///
  /// [constructors] :
  ///
  /// TestPageD : [String?(required) argument, bool? optional, String? id]
  ///
  /// TestPageD.another0 : [String?(required) argument]
  ///
  /// TestPageD.another1 : [String?(required) argument, bool? optional]
  ///
  /// TestPageD.another2 : [String?(required) argument]
  ///
  /// TestPageD.another3 : [String?(required) argument, bool? optional]
  ///
  /// [pageRouteType] : PageRouteType.material
  ///
  /// [exts] : {'group': 'Complex', 'order': 0}
  static const _TestPageD testPageD = _TestPageD();

  /// 'Show how to push new page with arguments(class)'
  ///
  /// [name] : '/testPageE'
  ///
  /// [routeName] : 'testPageE'
  ///
  /// [description] : 'Show how to push new page with arguments(class)'
  ///
  /// [constructors] :
  ///
  /// TestPageE : [TestMode? testMode, TestMode1? testMode1]
  ///
  /// TestPageE.test : []
  ///
  /// TestPageE.requiredC : [TestMode?(required) testMode]
  ///
  /// [exts] : {'group': 'Complex', 'order': 1}
  static const _TestPageE testPageE = _TestPageE();

  /// 'This is test page F.'
  ///
  /// [name] : '/testPageF'
  ///
  /// [routeName] : 'testPageF'
  ///
  /// [description] : 'This is test page F.'
  ///
  /// [constructors] :
  ///
  /// TestPageF : [List<int>?(required) list, Map<String, String>? map, TestMode? testMode]
  ///
  /// [pageRouteType] : PageRouteType.material
  ///
  /// [exts] : {'group': 'Complex', 'order': 2}
  static const _TestPageF testPageF = _TestPageF();

  /// 'Pop with result test page(push from TestPageC)'
  ///
  /// [name] : '/testPageG'
  ///
  /// [routeName] : 'testPageG'
  ///
  /// [description] : 'Pop with result test page(push from TestPageC)'
  ///
  /// [exts] : {'group': 'Simple', 'order': 3}
  static const _TestPageG testPageG = _TestPageG();

  /// 'ChildRouterPage'
  ///
  /// [name] : 'ChildRouterPage'
  ///
  /// [routeName] : 'ChildRouterPage'
  ///
  /// [description] : 'ChildRouterPage'
  static const _ChildRouterPage childRouterPage = _ChildRouterPage();

  /// 'NestedMainPage'
  ///
  /// [name] : 'NestedMainPage'
  ///
  /// [routeName] : 'NestedMainPage'
  ///
  /// [description] : 'NestedMainPage'
  static const _NestedMainPage nestedMainPage = _NestedMainPage();

  /// 'NestedTestPage'
  ///
  /// [name] : 'NestedTestPage'
  ///
  /// [routeName] : 'NestedTestPage'
  ///
  /// [description] : 'NestedTestPage'
  static const _NestedTestPage nestedTestPage = _NestedTestPage();
}

class _Root {
  const _Root();

  String get name => '/';

  Map<String, dynamic> d({
    Key? key,
  }) =>
      <String, dynamic>{
        'key': key,
        'argumentNames': <String>['key'],
      };

  @override
  String toString() => name;
}

class _Demogrouppage {
  const _Demogrouppage();

  String get name => '/demogrouppage';

  Map<String, dynamic> d({
    Key? key,
    required MapEntry<String, List<DemoRouteResult>> keyValue,
  }) =>
      <String, dynamic>{
        'key': key,
        'keyValue': keyValue,
        'argumentNames': <String>['key', 'keyValue'],
      };

  @override
  String toString() => name;
}

class _TestPageA {
  const _TestPageA();

  String get name => '/testPageA';

  Map<String, dynamic> d({
    Key? key,
  }) =>
      <String, dynamic>{
        'key': key,
        'argumentNames': <String>['key'],
      };

  @override
  String toString() => name;
}

class _TestPageB {
  const _TestPageB();

  String get name => '/testPageB';

  Map<String, dynamic> d({
    Key? key,
    String? argument,
  }) =>
      <String, dynamic>{
        'key': key,
        'argument': argument,
        'argumentNames': <String>['key', 'argument'],
      };

  @override
  String toString() => name;
}

class _TestPageC {
  const _TestPageC();

  String get name => '/testPageC';

  Map<String, dynamic> d({
    Key? key,
  }) =>
      <String, dynamic>{
        'key': key,
        'argumentNames': <String>['key'],
      };

  @override
  String toString() => name;
}

class _TestPageD {
  const _TestPageD();

  String get name => '/testPageD';

  Map<String, dynamic> d(
    String? argument, {
    Key? key,
    bool? optional = false,
    String? id = 'flutterCandies',
  }) =>
      <String, dynamic>{
        'argument': argument,
        'key': key,
        'optional': optional,
        'id': id,
        'argumentNames': <String>['argument', 'key', 'optional', 'id'],
      };

  Map<String, dynamic> another0({
    required String? argument,
  }) =>
      <String, dynamic>{
        'argument': argument,
        'constructorName': 'another0',
        'argumentNames': <String>['argument'],
      };

  Map<String, dynamic> another1(
    String? argument, [
    bool? optional = false,
  ]) =>
      <String, dynamic>{
        'argument': argument,
        'optional': optional,
        'constructorName': 'another1',
        'argumentNames': <String>['argument', 'optional'],
      };

  Map<String, dynamic> another2(
    String? argument,
  ) =>
      <String, dynamic>{
        'argument': argument,
        'constructorName': 'another2',
        'argumentNames': <String>['argument'],
      };

  Map<String, dynamic> another3(
    String? argument, {
    bool? optional,
  }) =>
      <String, dynamic>{
        'argument': argument,
        'optional': optional,
        'constructorName': 'another3',
        'argumentNames': <String>['argument', 'optional'],
      };

  @override
  String toString() => name;
}

class _TestPageE {
  const _TestPageE();

  String get name => '/testPageE';

  Map<String, dynamic> d({
    Key? key,
    TestMode? testMode = const TestMode(id: 2, isTest: false),
    TestMode1? testMode1,
  }) =>
      <String, dynamic>{
        'key': key,
        'testMode': testMode,
        'testMode1': testMode1,
        'argumentNames': <String>['key', 'testMode', 'testMode1'],
      };

  Map<String, dynamic> test() => const <String, dynamic>{
        'constructorName': 'test',
        'argumentNames': <String>[],
      };

  Map<String, dynamic> requiredC({
    required TestMode? testMode,
  }) =>
      <String, dynamic>{
        'testMode': testMode,
        'constructorName': 'requiredC',
        'argumentNames': <String>['testMode'],
      };

  @override
  String toString() => name;
}

class _TestPageF {
  const _TestPageF();

  String get name => '/testPageF';

  Map<String, dynamic> d(
    List<int>? list, {
    Key? key,
    Map<String, String>? map,
    TestMode? testMode,
  }) =>
      <String, dynamic>{
        'list': list,
        'key': key,
        'map': map,
        'testMode': testMode,
        'argumentNames': <String>['list', 'key', 'map', 'testMode'],
      };

  @override
  String toString() => name;
}

class _TestPageG {
  const _TestPageG();

  String get name => '/testPageG';

  Map<String, dynamic> d({
    Key? key,
  }) =>
      <String, dynamic>{
        'key': key,
        'argumentNames': <String>['key'],
      };

  @override
  String toString() => name;
}

class _ChildRouterPage {
  const _ChildRouterPage();

  String get name => 'ChildRouterPage';

  Map<String, dynamic> d({
    Key? key,
  }) =>
      <String, dynamic>{
        'key': key,
        'argumentNames': <String>['key'],
      };

  @override
  String toString() => name;
}

class _NestedMainPage {
  const _NestedMainPage();

  String get name => 'NestedMainPage';

  Map<String, dynamic> d({
    Key? key,
  }) =>
      <String, dynamic>{
        'key': key,
        'argumentNames': <String>['key'],
      };

  @override
  String toString() => name;
}

class _NestedTestPage {
  const _NestedTestPage();

  String get name => 'NestedTestPage';

  Map<String, dynamic> d({
    Key? key,
  }) =>
      <String, dynamic>{
        'key': key,
        'argumentNames': <String>['key'],
      };

  @override
  String toString() => name;
}
